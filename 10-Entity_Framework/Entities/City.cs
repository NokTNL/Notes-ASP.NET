using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace _10_Entity_Framework.Entities;

// Entities are the object representations of what is actually stored in the DB
public class City
{
    // If you name a field as `Id` it will be used as the primary key for searching in a table.
    // If not, you can always explicitly specify it with the `KeyAttribute`
    /* [Key] */
    // We want this field to be automatically generated by the DB instead of naively incrementing it
    [DatabaseGenerated(DatabaseGeneratedOption.Identity)] // DatabaseGeneratedOption.Identity --> generated on CREATION only (but not update)
    public required int Id { get; set; }

    // Validations are still needed here, otherwise the DB will allow columns with arbitary length
    // This is not needed in `Models/CityDto`, because that is only required for return GET data from the DB (which should already have been validated), whereas this one represents ACTUAL data constraints ion the DB
    [MaxLength(50)]
    public required string Name { get; set; }

    [MaxLength(200)]
    public string? Description { get; set; }

    // We often want to relate one entity in the DB to another. To do this, you will need to do a few things:
    // - We need to add an object representation of the RELATED ENTITY in our class as a property. This is called a "navigation"
    //   - Having navigations inside an object will create a "relationship" between two entities
    // - We need to have a foreign key in the child entity to point to the parent entity (See `Entities/PointOfInterest`)
    public required ICollection<PointOfInterest> PointOfInterests { get; set; }
}
